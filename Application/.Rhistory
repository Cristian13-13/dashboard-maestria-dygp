nuevo_menor <- lista_entrada[i]
menores <- c(menores, nuevo_menor)
}
if(lista_entrada[i] > k){
nuevo_mayor <- lista_entrada[i]
mayores <- c(mayores, nuevo_mayor)
}
}
resultado <- list(lista_menores = c(menores[-1]), lista_mayores = c(mayores[-1]))
return(resultado)
}
reto_min_tic(numeros_entrada, 10)
reto_min_tic <- function(lista_entrada, k){
menores <- ""
mayores <- ""
iguales <- ""
for(i in 1:length(lista_entrada)){
if(lista_entrada[i] < k){
nuevo_menor <- lista_entrada[i]
menores <- c(menores, nuevo_menor)
}
if(lista_entrada[i] > k){
nuevo_mayor <- lista_entrada[i]
mayores <- c(mayores, nuevo_mayor)
}
if(lista_entrada[i] == k){
nuevo_igual <- lista_entrada[i]
iguales <- c(iguales, nuevo_igual)
}
}
resultado <- list(lista_menores = c(menores[-1]), lista_mayores = c(mayores[-1]))
return(resultado)
}
reto_min_tic(numeros_entrada, 10)
reto_min_tic <- function(lista_entrada, k){
menores <- ""
mayores <- ""
iguales <- ""
for(i in 1:length(lista_entrada)){
if(lista_entrada[i] < k){
nuevo_menor <- lista_entrada[i]
menores <- c(menores, nuevo_menor)
}
if(lista_entrada[i] > k){
nuevo_mayor <- lista_entrada[i]
mayores <- c(mayores, nuevo_mayor)
}
if(lista_entrada[i] == k){
nuevo_igual <- lista_entrada[i]
iguales <- c(iguales, nuevo_igual)
}
}
resultado <- list(lista_menores = c(menores[-1]), lista_mayores = c(mayores[-1]), lista_iguales = c(iguales[-1]))
return(resultado)
}
reto_min_tic(numeros_entrada, 10)
10%%10
100%%10
110%%10
111%%10
reto_min_tic <- function(lista_entrada, k){
menores <- ""
mayores <- ""
iguales <- ""
for(i in 1:length(lista_entrada)){
if(lista_entrada[i] < k){
nuevo_menor <- lista_entrada[i]
menores <- c(menores, nuevo_menor)
}
if(lista_entrada[i] > k){
nuevo_mayor <- lista_entrada[i]
mayores <- c(mayores, nuevo_mayor)
}
if(lista_entrada[i] == k){
nuevo_igual <- lista_entrada[i]
iguales <- c(iguales, nuevo_igual)
}
if(lista_entrada[i]%%k == 0){
nuevo_multiplo <- lista_entrada[i]
multiplos <- c(multiplos, nuevo_multiplo)
}
}
resultado <- list(lista_menores = c(menores[-1]), lista_mayores = c(mayores[-1]), lista_iguales = c(iguales[-1]), lista_multiplos = c(multiplos[-1]))
return(resultado)
}
reto_min_tic(numeros_entrada, 10)
reto_min_tic <- function(lista_entrada, k){
menores <- ""
mayores <- ""
iguales <- ""
multiplos <- ""
for(i in 1:length(lista_entrada)){
if(lista_entrada[i] < k){
nuevo_menor <- lista_entrada[i]
menores <- c(menores, nuevo_menor)
}
if(lista_entrada[i] > k){
nuevo_mayor <- lista_entrada[i]
mayores <- c(mayores, nuevo_mayor)
}
if(lista_entrada[i] == k){
nuevo_igual <- lista_entrada[i]
iguales <- c(iguales, nuevo_igual)
}
if(lista_entrada[i]%%k == 0){
nuevo_multiplo <- lista_entrada[i]
multiplos <- c(multiplos, nuevo_multiplo)
}
}
resultado <- list(lista_menores = c(menores[-1]), lista_mayores = c(mayores[-1]), lista_iguales = c(iguales[-1]), lista_multiplos = c(multiplos[-1]))
return(resultado)
}
reto_min_tic(numeros_entrada, 10)
reto_min_tic <- function(lista_entrada, k){
menores <- ""
mayores <- ""
iguales <- ""
multiplos <- 0
for(i in 1:length(lista_entrada)){
if(lista_entrada[i] < k){
nuevo_menor <- lista_entrada[i]
menores <- c(menores, nuevo_menor)
}
if(lista_entrada[i] > k){
nuevo_mayor <- lista_entrada[i]
mayores <- c(mayores, nuevo_mayor)
}
if(lista_entrada[i] == k){
nuevo_igual <- lista_entrada[i]
iguales <- c(iguales, nuevo_igual)
}
if(lista_entrada[i]%%k == 0){
nuevo_multiplo <- lista_entrada[i]
multiplos <- c(multiplos, nuevo_multiplo)
}
}
resultado <- list(lista_menores = c(menores[-1]), lista_mayores = c(mayores[-1]), lista_iguales = c(iguales[-1]), lista_multiplos = c(multiplos[-1]))
return(resultado)
}
reto_min_tic(numeros_entrada, 10)
reto_min_tic <- function(lista_entrada, k){
menores <- ""
mayores <- ""
iguales <- ""
multiplos <- 0
for(i in 1:length(lista_entrada)){
if(lista_entrada[i] < k){
nuevo_menor <- lista_entrada[i]
menores <- c(menores, nuevo_menor)
}
if(lista_entrada[i] > k){
nuevo_mayor <- lista_entrada[i]
mayores <- c(mayores, nuevo_mayor)
}
if(lista_entrada[i] == k){
nuevo_igual <- lista_entrada[i]
iguales <- c(iguales, nuevo_igual)
}
if(lista_entrada[i]%%k == 0){
nuevo_multiplo <- lista_entrada[i]
multiplos <- c(multiplos, nuevo_multiplo)
}
}
resultado <- list(lista_menores = c(menores[-1]), lista_mayores = c(mayores[-1]), lista_iguales = c(iguales[-1]), lista_multiplos = c(multiplos))
return(resultado)
}
reto_min_tic(numeros_entrada, 10)
reto_min_tic <- function(lista_entrada, k){
menores <- ""
mayores <- ""
iguales <- ""
multiplos <- ""
for(i in 1:length(lista_entrada)){
if(lista_entrada[i] < k){
nuevo_menor <- lista_entrada[i]
menores <- c(menores, nuevo_menor)
}
if(lista_entrada[i] > k){
nuevo_mayor <- lista_entrada[i]
mayores <- c(mayores, nuevo_mayor)
}
if(lista_entrada[i] == k){
nuevo_igual <- lista_entrada[i]
iguales <- c(iguales, nuevo_igual)
}
if(lista_entrada[i]%%k == 0){
nuevo_multiplo <- lista_entrada[i]
multiplos <- c(multiplos, nuevo_multiplo)
}
}
resultado <- list(lista_menores = c(menores[-1]), lista_mayores = c(mayores[-1]), lista_iguales = c(iguales[-1]), lista_multiplos = c(multiplos[-1]))
return(resultado)
}
reto_min_tic(numeros_entrada, 10)
numeros_entrada <-rnorm(1000, mean = 32)
numeros_entrada
numeros_entrada <-round(rnorm(1000, mean = 32),0)
numeros_entrada
numeros_entrada <- sample(1000)
numeros_entrada
reto_min_tic(numeros_entrada, 25)
numeros_entrada <- runif(10000, min = 0, 130)
numeros_entrada
reto_min_tic(numeros_entrada, 53)
numeros_entrada
numeros_entrada <-round(runif(10000, min = 0, 130),0)
numeros_entrada
reto_min_tic(numeros_entrada, 53)
install.packages(png)
install.packages(png,reticulate)
nchar(""Ashwagandha, 60 Vegetarian Capsules;Vitamin D3, 50 mcg (2,000 IU), 360 Fish Gelati asdh kjsadfjsd kjfhkasjdhfkjsadh fkjsdfkj skjdf skjdfh kjsah dfkjsh kfhsdkjf hskdjhf kjsdhf kjsadh fkjsdhfkjsa hfkjsakfj hsdkjf hsakjd hfkjsh fkjashf kjas fkjs hdfkjhsdkfj sadkjfh asdkfh kjsahf kjsdhf kjsd fhkjsahd fkjash fkjshdfkjash dfkjash dfkj hsakjdf hskajf hskajhf ksjah fkjsahf kjsahdf kljashf kjsah fkljs"")
nchar("Ashwagandha, 60 Vegetarian Capsules;Vitamin D3, 50 mcg (2,000 IU), 360 Fish Gelati asdh kjsadfjsd kjfhkasjdhfkjsadh fkjsdfkj skjdf skjdfh kjsah dfkjsh kfhsdkjf hskdjhf kjsdhf kjsadh fkjsdhfkjsa hfkjsakfj hsdkjf hsakjd hfkjsh fkjashf kjas fkjs hdfkjhsdkfj sadkjfh asdkfh kjsahf kjsdhf kjsd fhkjsahd fkjash fkjshdfkjash dfkjash dfkj hsakjdf hskajf hskajhf ksjah fkjsahf kjsahdf kljashf kjsah fkljs")
nchar("Ashwagandha, 60 Vegetarian Capsules;Vitamin D3, 50 mcg (2,000 IU), 360 Fish Gelati asdh kjsadfjsd kjfhkasjdhfkjsadh fkjsdfkj skjdf skjdfh kjsah dfkjsh kfhsdkjf hskdjhf kjsdhf kjsadh fkjsdhfkjsa hfkjsakfj hsdkjf hsakjd hfkjsh fkjashf kjas fkjs hdfkjhsdkfj sadkjfh asdkfh kjsahf kjsdhf kjsd fhkjsahd fkjash fkjshdfkjash dfkjash dfkj hsakjdf hskajf hska ")
nchar("Watches-Men Watches🌺Entrega en 24 horas🌺 Reloj para electrónico niños Digital LED estilo moda para mujer/reloj casual minimalista de alta calidad/nuevo diseño electrónico digital writswacth/reloj deportivo cuadrado luminoso/impermeable transparente correa reloj11")
nchar("Watches-Men Watches🌺Entrega en 24 horas🌺 Reloj para electrónico niños Digital LED estilo moda para mujer/reloj casual minimalista de alta calidad/nuevo diseño electrónico digital writswacth/reloj deportivo cuadrado luminoso/impermeable transparente correa reloj11 Watches-Men Watches🌺Entrega en 24 horas🌺 Reloj para electrónico niños Digital LED estilo moda para mujer/reloj casual minimalista de alta calidad/nuevo diseño electrónico digital writswacth/reloj deportivo cuadrado luminoso/impermeable transparente correa reloj11")
nchar("Watches-Men Watches🌺Entrega en 24 horas🌺 Reloj para electrónico niños Digital LED estilo moda para mujer/reloj casual minimalista de alta calidad/nuevo diseño electrónico digital writswacth/reloj deportivo cuadrado luminoso/impermeable transparente correa reloj11 Watches-Men Watches🌺Entrega en 24 horas🌺 Reloj para electrónico niños Digital LED estilo moda para mujer/reloj casual minimalista de alta calidad/nuevo diseño electrónico digital writswacth/reloj deportivo cuadrado luminoso/impermeable transparente correa reloj11")
nchar("Watches-Men Watches🌺Entrega en 24 horas🌺 Reloj para electrónico niños Digital LED estilo moda para mujer/reloj casual minimalista de alta calidad/nuevo diseño electrónico digital writswacth/reloj deportivo cuadrado luminoso/impermeable transparente correa reloj11 Watches-Men Watches🌺Entrega en 24 horas🌺 Reloj para electrónico niño ")
nchar("Watches-Men Watches🌺Entrega en 24 horas🌺 Reloj para electrónico niños Digital LED estilo moda para mujer/reloj casual minimalista de alta calidad/nuevo diseño electrónico digital writswacth/reloj deportivo cuadrado luminoso/impermeable transparente correa reloj11 Watches-Men Watches🌺Entrega en 24 horas🌺 Reloj para electrónico niños Digital LED estilo moda para mujer/reloj casual minimalista de alta calidad/nuevo diseño electrónico digital writswacth/reloj deportivo cuadrado luminoso/impermeable transparente correa reloj11")
nchar("Watches-Men Watches🌺Entrega en 24 horas🌺 Reloj para electrónico niños Digital LED estilo moda para mujer/reloj casual minimalista de alta calidad/nuevo diseño electrónico digital writswacth/reloj deportivo cuadrado luminoso/impermeable transparente correa reloj11 Watches-Men Watches🌺Entrega en 24 horas🌺 Reloj para electrónico niño ")
library(lattice)
library(ggplot2)
library(caret)
data("iris")
summary(iris[,1:4])
preProcessParams <- preProcess(iris[,1:4], method = "scale")
print(preProcessParam)
preProcessParams <- preProcess(iris[,1:4], method = "scale")
print(preProcessParam)
print(preProcessParams)
transformed <- predict(preProcessParams, iris[,1:4])
transformed
summary(transformed)
summary(iris[,1:4])
data("iris")
summary(iris[,1:4])
preProcessParams <- preProcess(iris[,1:4], method = "center")
print(preProcessParams)
transformed <- predict(preProcessParams, iris[,1:4])
summary(transformed)
summary(iris[,1:4])
summary(transformed)
transformed
par(mfrow = c(1,3))
for (i in 1:4) {
hist(transformed[i], main = names(transformed)[i])
}
transformed[1]
names(transformed)[1]
for (i in 1:4) {
hist(transformed[i], main = names(transformed)[i])
}
for (i in 1:4) {
hist(transformed[i], main = names(transformed)[i])
}
for (i in 1:4) {
plot(density(iris[,i]), main = names(iris)[i])
#hist(transformed[i], main = names(transformed)[i])
}
par(mfrow = c(1,4))
for (i in 1:4) {
plot(density(iris[,i]), main = names(iris)[i])
#hist(transformed[i], main = names(transformed)[i])
}
transformed
transformed[1]
for (i in 1:4) {
#plot(density(iris[,i]), main = names(iris)[i])
hist(transformed[i], main = names(transformed)[i])
}
iris[,1:4]
summary(transformed)
for (i in 1:4) {
#plot(density(iris[,i]), main = names(iris)[i])
hist(transformed[i]#, main = names(transformed)[i]
)
}
for (i in 1:4) {
#plot(density(iris[,i]), main = names(iris)[i])
hist(transformed[,i]#, main = names(transformed)[i]
)
}
for (i in 1:4) {
#plot(density(iris[,i]), main = names(iris)[i])
hist(transformed[,i], main = names(transformed)[i])
}
}
}
for (i in 1:4) {
hist(transformed[,i], main = names(transformed)[i])
# if(i == 4){
#   for(j in 1:4){
#     hist(iris[,j], main = paste(names(iris)[j],".","iris")
#   }
# }
}
for (i in 1:4) {
hist(transformed[,i], main = names(transformed)[i])
if(i == 4) print("eureka")
# if(i == 4){
#   for(j in 1:4){
#     hist(iris[,j], main = paste(names(iris)[j],".","iris")
#   }
# }
}
}
for (i in 1:4) {
hist(transformed[,i], main = names(transformed)[i])
if(i == 4){
for(j in 1:4){
hist(iris[,j], main = paste(names(iris)[j],".","iris"))
}
}
}
par(mfrow = c(2,4))
for (i in 1:4) {
hist(transformed[,i], main = names(transformed)[i])
if(i == 4){
for(j in 1:4){
hist(iris[,j], main = paste(names(iris)[j],".","iris"))
}
}
}
for (i in 1:4) {
hist(transformed[,i], main = paste0(names(transformed)[i],".","transformed") )
if(i == 4){
for(j in 1:4){
hist(iris[,j], main = paste0(names(iris)[j],".","iris"))
}
}
}
function(data_base_in, method_in){
database <- data_base_in
par(mfrow = c(2,4))
preProcessParams <- preProcess(database, method = method_in)
transformed <- predict(preProcessParams, database)
for (i in 1:4) {
hist(transformed[,i], main = paste0(names(transformed)[i],".","transformed") )
if(i == 4){
for(j in 1:4){
hist(database[,j], main = paste0(names(database)[j],".","iris"))
}
}
}
}
clear_data <- function(data_base_in, method_in){
database <- data_base_in
par(mfrow = c(2,4))
preProcessParams <- preProcess(database, method = method_in)
transformed <- predict(preProcessParams, database)
for (i in 1:4) {
hist(transformed[,i], main = paste0(names(transformed)[i],".","transformed") )
if(i == 4){
for(j in 1:4){
hist(database[,j], main = paste0(names(database)[j],".","iris"))
}
}
}
}
clear_data(iris[,1:4], "center")
clear_data(iris[,1:4], "center")
clear_data(iris[,1:4], "scale")
clear_data(iris[,1:4], "center")
count(iris[,1:4])
library(tidyverse)
count(iris[,1:4])
length(iris[,1:4])
clear_data <- function(data_base_in, method_in){
database <- data_base_in
par(mfrow = c(2,length(database)))
preProcessParams <- preProcess(database, method = method_in)
transformed <- predict(preProcessParams, database)
for (i in 1:4) {
hist(transformed[,i], main = paste0(names(transformed)[i],".","transformed") )
if(i == 4){
for(j in 1:4){
hist(database[,j], main = paste0(names(database)[j],".","iris"))
}
}
}
}
clear_data <- function(data_base_in, method_in){
database <- data_base_in
par(mfrow = c(2,length(database)))
preProcessParams <- preProcess(database, method = method_in)
transformed <- predict(preProcessParams, database)
for (i in 1:4) {
hist(transformed[,i], main = paste0(names(transformed)[i],".","transformed") )
if(i == 4){
for(j in 1:4){
hist(database[,j], main = paste0(names(database)[j],".","iris"))
}
}
}
}
clear_data(iris[,1:4], "center")
clear_data(iris[,1:3], "center")
clear_data <- function(data_base_in, method_in){
database <- data_base_in
par(mfrow = c(2,length(database)))
preProcessParams <- preProcess(database, method = method_in)
transformed <- predict(preProcessParams, database)
for (i in 1:length(database)) {
hist(transformed[,i], main = paste0(names(transformed)[i],".","transformed") )
if(i == length(database)){
for(j in 1:length(database)){
hist(database[,j], main = paste0(names(database)[j],".","iris"))
}
}
}
}
clear_data(iris[,1:3], "center")
clear_data(iris[,1:3], c("center","scale"))
clear_data(iris[,1:4], c("center","scale"))
summary(iris[,1:4])
preProcessParams <- preProcess(iris[,1:4], method = c("center", "scale"))
transformed <- predict(preProcessParams, iris[,1:4])
hist(transformed[,1], main = names(transformed)[1])
hist(transformed[,2], main = names(transformed)[2])
clear_data(iris[,1:4], "range")
data("iris")
preProcessParams <- preProcess(iris[,1:4], method = "range")
transformed <- predict(preProcessParams, iris[,1:4])
hist(transformed[,2], main = names(transformed)[2])
data("iris")
preProcessParams <- preProcess(iris[,1:4], method = c("center", "scale"))
transformed <- predict(preProcessParams, iris[,1:4])
hist(transformed[,2], main = names(transformed)[2])
library(mlbench)
data("PimaIndiansDiabetes")
data("PimaIndiansDiabetes")
preProcessParams <- PimaIndiansDiabetes[,7:8], method = "range")
preProcessParams <- PimaIndiansDiabetes[,7:8], method = "BoxCox")
preProcessParams <- preProcess(PimaIndiansDiabetes[,7:8], method = "BoxCox")
transformed <- predict(preProcessParams, PimaIndiansDiabetes[,7:8])
hist(transformed[,2], main = names(transformed)[2])
data("PimaIndiansDiabetes")
preProcessParams <- preProcess(PimaIndiansDiabetes[,7:8], method = "YeoJhonson")
transformed <- predict(preProcessParams, PimaIndiansDiabetes[,7:8])
hist(transformed[,2], main = names(transformed)[2])
preProcessParams <- preProcess(PimaIndiansDiabetes[,7:8], method = "YeoJhonson")
preProcessParams <- preProcess(PimaIndiansDiabetes[,7:8], method = "YeoJohnson")
transformed <- predict(preProcessParams, PimaIndiansDiabetes[,7:8])
hist(transformed[,2], main = names(transformed)[2])
summary(iris)
preProcessParams <- preProcess(iris, method = c("center","scale","pca"))
transformed <- predict(preProcessParams, iris)
summary(transform())
preProcessParams <- preProcess(iris, method = c("center","scale","pca"))
library(lattice)
library(ggplot2)
library(caret)
library(tidyverse)
preProcessParams <- preProcess(iris, method = c("center","scale","pca"))
print(preProcessParams)
transformed <- predict(preProcessParams, iris)
summary(transform())
transformed <- predict(preProcessParams, iris)
summary(transformed)
summary(transformed)
hist(transformed, main = names(transformed))
hist(transformed[1], main = names(transformed)[1])
transformed[1]
hist(transformed[2], main = names(transformed)[2]])
hist(transformed[2], main = names(transformed)[2]])
hist(transformed[2], main = names(transformed)[2])
summary(transformed)
transformed
hist(transformed[,2], main = names(transformed)[,2])
hist(transformed[,2], main = names(transformed)[1])
hist(transformed[,2], main = names(transformed)[2])
hist(transformed[,2:3], main = names(transformed)[2:3])
par(mfrow = c(1,2))
hist(transformed[,2], main = names(transformed)[2])
hist(transformed[,3], main = names(transformed)[3])
data("pimaIndiansDiabetes")
data("PimaIndiansDiabetes")
data("PimaIndiansDiabetes")
# Box-cox -----------------------------------------------------------------
# Afecta la distribución
# Se utiliza para corregir el sesgo, con variables que no tienen distribución normal
library(mlbench)
data("PimaIndiansDiabetes")
PimaIndiansDiabetes[,1:8]
summary(PimaIndiansDiabetes[,1:8])
preProcessParams <- preProcess(PimaIndiansDiabetes[,1:8],
method = c("center","scale","ica"))
preProcessParams <- preProcess(PimaIndiansDiabetes[,1:8],
method = c("center","scale","ica"), n.comp = 5)
install.packages("fastICA")
# ICA ---------------------------------------------------------------------
# Sirve para separar una señal multivariante en subcomponentes aditivos suponiendo que
# La señal de origen tiene una independencia estadística y es no gausiana
library(fastICA)
preProcessParams <- preProcess(PimaIndiansDiabetes[,1:8],
method = c("center","scale","ica"), n.comp = 5)
transformed <- predict(preProcessParams, PimaIndiansDiabetes[,1:8])
summary(transformed)
library(rsconnect)
setwd("~/GitHub/Aplicacion de ejemplo 1/dashboard-maestria-dygp/Application")
rsconnect::setAccountInfo(name='cridaca13',
token='A20E46EB3C35EB4D8A9F21AA7E899AAC',
secret='lEte8wH+gbYqW3mRDGNLALfjx6KHtCn9DA1Sk8CO')
getwd()
deployApp(appDir = getwd())
#token='A20E46EB3C35EB4D8A9F21AA7E899AAC'
#Aplicación desarrollada por: Cristian Barrera
#Archivos de UI
source("ui.R")
source("server.R")
# Ejecutable de aplicación
shinyApp(ui = get_main_ui, server = main_server)
deployApp(appDir = getwd())
