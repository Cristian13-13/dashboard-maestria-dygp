transformed[1]
names(transformed)[1]
for (i in 1:4) {
hist(transformed[i], main = names(transformed)[i])
}
for (i in 1:4) {
hist(transformed[i], main = names(transformed)[i])
}
for (i in 1:4) {
plot(density(iris[,i]), main = names(iris)[i])
#hist(transformed[i], main = names(transformed)[i])
}
par(mfrow = c(1,4))
for (i in 1:4) {
plot(density(iris[,i]), main = names(iris)[i])
#hist(transformed[i], main = names(transformed)[i])
}
transformed
transformed[1]
for (i in 1:4) {
#plot(density(iris[,i]), main = names(iris)[i])
hist(transformed[i], main = names(transformed)[i])
}
iris[,1:4]
summary(transformed)
for (i in 1:4) {
#plot(density(iris[,i]), main = names(iris)[i])
hist(transformed[i]#, main = names(transformed)[i]
)
}
for (i in 1:4) {
#plot(density(iris[,i]), main = names(iris)[i])
hist(transformed[,i]#, main = names(transformed)[i]
)
}
for (i in 1:4) {
#plot(density(iris[,i]), main = names(iris)[i])
hist(transformed[,i], main = names(transformed)[i])
}
}
}
for (i in 1:4) {
hist(transformed[,i], main = names(transformed)[i])
# if(i == 4){
#   for(j in 1:4){
#     hist(iris[,j], main = paste(names(iris)[j],".","iris")
#   }
# }
}
for (i in 1:4) {
hist(transformed[,i], main = names(transformed)[i])
if(i == 4) print("eureka")
# if(i == 4){
#   for(j in 1:4){
#     hist(iris[,j], main = paste(names(iris)[j],".","iris")
#   }
# }
}
}
for (i in 1:4) {
hist(transformed[,i], main = names(transformed)[i])
if(i == 4){
for(j in 1:4){
hist(iris[,j], main = paste(names(iris)[j],".","iris"))
}
}
}
par(mfrow = c(2,4))
for (i in 1:4) {
hist(transformed[,i], main = names(transformed)[i])
if(i == 4){
for(j in 1:4){
hist(iris[,j], main = paste(names(iris)[j],".","iris"))
}
}
}
for (i in 1:4) {
hist(transformed[,i], main = paste0(names(transformed)[i],".","transformed") )
if(i == 4){
for(j in 1:4){
hist(iris[,j], main = paste0(names(iris)[j],".","iris"))
}
}
}
function(data_base_in, method_in){
database <- data_base_in
par(mfrow = c(2,4))
preProcessParams <- preProcess(database, method = method_in)
transformed <- predict(preProcessParams, database)
for (i in 1:4) {
hist(transformed[,i], main = paste0(names(transformed)[i],".","transformed") )
if(i == 4){
for(j in 1:4){
hist(database[,j], main = paste0(names(database)[j],".","iris"))
}
}
}
}
clear_data <- function(data_base_in, method_in){
database <- data_base_in
par(mfrow = c(2,4))
preProcessParams <- preProcess(database, method = method_in)
transformed <- predict(preProcessParams, database)
for (i in 1:4) {
hist(transformed[,i], main = paste0(names(transformed)[i],".","transformed") )
if(i == 4){
for(j in 1:4){
hist(database[,j], main = paste0(names(database)[j],".","iris"))
}
}
}
}
clear_data(iris[,1:4], "center")
clear_data(iris[,1:4], "center")
clear_data(iris[,1:4], "scale")
clear_data(iris[,1:4], "center")
count(iris[,1:4])
library(tidyverse)
count(iris[,1:4])
length(iris[,1:4])
clear_data <- function(data_base_in, method_in){
database <- data_base_in
par(mfrow = c(2,length(database)))
preProcessParams <- preProcess(database, method = method_in)
transformed <- predict(preProcessParams, database)
for (i in 1:4) {
hist(transformed[,i], main = paste0(names(transformed)[i],".","transformed") )
if(i == 4){
for(j in 1:4){
hist(database[,j], main = paste0(names(database)[j],".","iris"))
}
}
}
}
clear_data <- function(data_base_in, method_in){
database <- data_base_in
par(mfrow = c(2,length(database)))
preProcessParams <- preProcess(database, method = method_in)
transformed <- predict(preProcessParams, database)
for (i in 1:4) {
hist(transformed[,i], main = paste0(names(transformed)[i],".","transformed") )
if(i == 4){
for(j in 1:4){
hist(database[,j], main = paste0(names(database)[j],".","iris"))
}
}
}
}
clear_data(iris[,1:4], "center")
clear_data(iris[,1:3], "center")
clear_data <- function(data_base_in, method_in){
database <- data_base_in
par(mfrow = c(2,length(database)))
preProcessParams <- preProcess(database, method = method_in)
transformed <- predict(preProcessParams, database)
for (i in 1:length(database)) {
hist(transformed[,i], main = paste0(names(transformed)[i],".","transformed") )
if(i == length(database)){
for(j in 1:length(database)){
hist(database[,j], main = paste0(names(database)[j],".","iris"))
}
}
}
}
clear_data(iris[,1:3], "center")
clear_data(iris[,1:3], c("center","scale"))
clear_data(iris[,1:4], c("center","scale"))
summary(iris[,1:4])
preProcessParams <- preProcess(iris[,1:4], method = c("center", "scale"))
transformed <- predict(preProcessParams, iris[,1:4])
hist(transformed[,1], main = names(transformed)[1])
hist(transformed[,2], main = names(transformed)[2])
clear_data(iris[,1:4], "range")
data("iris")
preProcessParams <- preProcess(iris[,1:4], method = "range")
transformed <- predict(preProcessParams, iris[,1:4])
hist(transformed[,2], main = names(transformed)[2])
data("iris")
preProcessParams <- preProcess(iris[,1:4], method = c("center", "scale"))
transformed <- predict(preProcessParams, iris[,1:4])
hist(transformed[,2], main = names(transformed)[2])
library(mlbench)
data("PimaIndiansDiabetes")
data("PimaIndiansDiabetes")
preProcessParams <- PimaIndiansDiabetes[,7:8], method = "range")
preProcessParams <- PimaIndiansDiabetes[,7:8], method = "BoxCox")
preProcessParams <- preProcess(PimaIndiansDiabetes[,7:8], method = "BoxCox")
transformed <- predict(preProcessParams, PimaIndiansDiabetes[,7:8])
hist(transformed[,2], main = names(transformed)[2])
data("PimaIndiansDiabetes")
preProcessParams <- preProcess(PimaIndiansDiabetes[,7:8], method = "YeoJhonson")
transformed <- predict(preProcessParams, PimaIndiansDiabetes[,7:8])
hist(transformed[,2], main = names(transformed)[2])
preProcessParams <- preProcess(PimaIndiansDiabetes[,7:8], method = "YeoJhonson")
preProcessParams <- preProcess(PimaIndiansDiabetes[,7:8], method = "YeoJohnson")
transformed <- predict(preProcessParams, PimaIndiansDiabetes[,7:8])
hist(transformed[,2], main = names(transformed)[2])
summary(iris)
preProcessParams <- preProcess(iris, method = c("center","scale","pca"))
transformed <- predict(preProcessParams, iris)
summary(transform())
preProcessParams <- preProcess(iris, method = c("center","scale","pca"))
library(lattice)
library(ggplot2)
library(caret)
library(tidyverse)
preProcessParams <- preProcess(iris, method = c("center","scale","pca"))
print(preProcessParams)
transformed <- predict(preProcessParams, iris)
summary(transform())
transformed <- predict(preProcessParams, iris)
summary(transformed)
summary(transformed)
hist(transformed, main = names(transformed))
hist(transformed[1], main = names(transformed)[1])
transformed[1]
hist(transformed[2], main = names(transformed)[2]])
hist(transformed[2], main = names(transformed)[2]])
hist(transformed[2], main = names(transformed)[2])
summary(transformed)
transformed
hist(transformed[,2], main = names(transformed)[,2])
hist(transformed[,2], main = names(transformed)[1])
hist(transformed[,2], main = names(transformed)[2])
hist(transformed[,2:3], main = names(transformed)[2:3])
par(mfrow = c(1,2))
hist(transformed[,2], main = names(transformed)[2])
hist(transformed[,3], main = names(transformed)[3])
data("pimaIndiansDiabetes")
data("PimaIndiansDiabetes")
data("PimaIndiansDiabetes")
# Box-cox -----------------------------------------------------------------
# Afecta la distribución
# Se utiliza para corregir el sesgo, con variables que no tienen distribución normal
library(mlbench)
data("PimaIndiansDiabetes")
PimaIndiansDiabetes[,1:8]
summary(PimaIndiansDiabetes[,1:8])
preProcessParams <- preProcess(PimaIndiansDiabetes[,1:8],
method = c("center","scale","ica"))
preProcessParams <- preProcess(PimaIndiansDiabetes[,1:8],
method = c("center","scale","ica"), n.comp = 5)
install.packages("fastICA")
# ICA ---------------------------------------------------------------------
# Sirve para separar una señal multivariante en subcomponentes aditivos suponiendo que
# La señal de origen tiene una independencia estadística y es no gausiana
library(fastICA)
preProcessParams <- preProcess(PimaIndiansDiabetes[,1:8],
method = c("center","scale","ica"), n.comp = 5)
transformed <- predict(preProcessParams, PimaIndiansDiabetes[,1:8])
summary(transformed)
setwd("~/GitHub/Aplicacion de ejemplo 1/dashboard-maestria-dygp")
#Librerias
library(shiny)
library(DT)
library(tidyverse)
library(xlsx)
library(readxl)
library(shinydashboard)
#Archivos de UI
source("Application/UI_files/UI.R")
source("Application/UI_files/main_sidebar_menu.R")
# Conexión a los archivos externos
source("datos/data_loading.R")
source("Application/Modulos/monitor_estado_actual.R")
source("Application/Server.R")
# Ejecutable de aplicación
shinyApp(ui = get_main_ui, server = main_server)
#Librerias
library(shiny)
library(DT)
library(tidyverse)
library(xlsx)
library(readxl)
library(shinydashboard)
#Archivos de UI
source("Application/UI_files/UI.R")
source("Application/UI_files/main_sidebar_menu.R")
# Conexión a los archivos externos
source("datos/data_loading.R")
source("Application/Modulos/monitor_estado_actual.R")
source("Application/Server.R")
# Ejecutable de aplicación
shinyApp(ui = get_main_ui, server = main_server)
#Librerias
library(shiny)
library(DT)
library(tidyverse)
library(xlsx)
library(readxl)
library(shinydashboard)
#Archivos de UI
source("Application/UI_files/UI.R")
source("Application/UI_files/main_sidebar_menu.R")
# Conexión a los archivos externos
source("datos/data_loading.R")
source("Application/Modulos/monitor_estado_actual.R")
source("Application/Server.R")
# Ejecutable de aplicación
shinyApp(ui = get_main_ui, server = main_server)
data_cargada
data_cargada$proyecto
count(data_cargada$proyecto)
(data_cargada$proyecto)
nrow(data_cargada$proyecto)
length(unique(data_cargada$proyecto))
data_cargada[[estado == "Pendiente"]]
data_cargada[estado == "Pendiente"]
data_cargada$estado
length(filter(data_cargada$estado == "Pendiente"))
length(filter(data_cargada, estado == "Pendiente"))
filter(data_cargada, estado == "Pendiente")
length(filter(data_cargada, estado_actual == "Pendiente"))
filter(data_cargada, estado_actual == "Pendiente")
nrow(filter(data_cargada, estado_actual == "Pendiente"))
#Librerias
library(shiny)
library(DT)
library(tidyverse)
library(xlsx)
library(readxl)
library(shinydashboard)
#Archivos de UI
source("Application/UI_files/UI.R")
source("Application/UI_files/main_sidebar_menu.R")
# Conexión a los archivos externos
source("datos/data_loading.R")
source("Application/Modulos/monitor_estado_actual.R")
source("Application/Server.R")
# Ejecutable de aplicación
shinyApp(ui = get_main_ui, server = main_server)
#Librerias
library(shiny)
library(DT)
library(tidyverse)
library(xlsx)
library(readxl)
library(shinydashboard)
#Archivos de UI
source("Application/UI_files/UI.R")
source("Application/UI_files/main_sidebar_menu.R")
# Conexión a los archivos externos
source("datos/data_loading.R")
source("Application/Modulos/monitor_estado_actual.R")
source("Application/Server.R")
# Ejecutable de aplicación
shinyApp(ui = get_main_ui, server = main_server)
data_cargada
data_table_info <- data_cargada%>%
transmute(
codigo = codigo,
proyecto = proyecto,
fecha_de_recepcion = fecha_de_recepcion,
tareas_retradas = fecha_maxima_entrega > Sys.Date()
)
data_table_info
#Librerias
library(shiny)
library(DT)
library(tidyverse)
library(xlsx)
library(readxl)
library(shinydashboard)
#Archivos de UI
source("Application/UI_files/UI.R")
source("Application/UI_files/main_sidebar_menu.R")
# Conexión a los archivos externos
source("datos/data_loading.R")
source("Application/Modulos/monitor_estado_actual.R")
source("Application/Server.R")
# Ejecutable de aplicación
shinyApp(ui = get_main_ui, server = main_server)
#Librerias
library(shiny)
library(DT)
library(tidyverse)
library(xlsx)
library(readxl)
library(shinydashboard)
#Archivos de UI
source("Application/UI_files/UI.R")
source("Application/UI_files/main_sidebar_menu.R")
# Conexión a los archivos externos
source("datos/data_loading.R")
source("Application/Modulos/monitor_estado_actual.R")
source("Application/Server.R")
# Ejecutable de aplicación
shinyApp(ui = get_main_ui, server = main_server)
#Librerias
library(shiny)
library(DT)
library(tidyverse)
library(xlsx)
library(readxl)
library(shinydashboard)
#Archivos de UI
source("Application/UI_files/UI.R")
source("Application/UI_files/main_sidebar_menu.R")
# Conexión a los archivos externos
source("datos/data_loading.R")
source("Application/Modulos/monitor_estado_actual.R")
source("Application/Server.R")
# Ejecutable de aplicación
shinyApp(ui = get_main_ui, server = main_server)
#Librerias
library(shiny)
library(DT)
library(tidyverse)
library(xlsx)
library(readxl)
library(shinydashboard)
#Archivos de UI
source("Application/UI_files/UI.R")
source("Application/UI_files/main_sidebar_menu.R")
# Conexión a los archivos externos
source("datos/data_loading.R")
source("Application/Modulos/monitor_estado_actual.R")
source("Application/Server.R")
# Ejecutable de aplicación
shinyApp(ui = get_main_ui, server = main_server)
#Librerias
library(shiny)
library(DT)
library(tidyverse)
library(xlsx)
library(readxl)
library(shinydashboard)
#Archivos de UI
source("Application/UI_files/UI.R")
source("Application/UI_files/main_sidebar_menu.R")
# Conexión a los archivos externos
source("datos/data_loading.R")
source("Application/Modulos/monitor_estado_actual.R")
source("Application/Server.R")
# Ejecutable de aplicación
shinyApp(ui = get_main_ui, server = main_server)
if(!require("devtools"))
install.packages("devtools")
install.packages("devtools")
devtools::install_github("rstudio/rsconnect")
devtools::install_github("rstudio/rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='cridaca13',
token='A20E46EB3C35EB4D8A9F21AA7E899AAC',
secret='lEte8wH+gbYqW3mRDGNLALfjx6KHtCn9DA1Sk8CO')
getwd()
deployApp(appDir = getwd())
setwd("~/GitHub/Aplicacion de ejemplo 1/dashboard-maestria-dygp/Application")
#Librerias
library(shiny)
library(DT)
library(tidyverse)
library(xlsx)
library(readxl)
library(shinydashboard)
#Archivos de UI
source("ui.R")
source("UI_files/main_sidebar_menu.R")
# Conexión a los archivos externos
source("datos/data_loading.R")
source("Modulos/monitor_estado_actual.R")
source("server.R")
# Ejecutable de aplicación
shinyApp(ui = get_main_ui, server = main_server)
setwd("~/GitHub/Aplicacion de ejemplo 1/dashboard-maestria-dygp/Application")
rsconnect::setAccountInfo(name='cridaca13',
token='A20E46EB3C35EB4D8A9F21AA7E899AAC',
secret='lEte8wH+gbYqW3mRDGNLALfjx6KHtCn9DA1Sk8CO')
deployApp(appDir = getwd())
length(which(table(data_cargada$estado_actual= "Pendiente")))
length(which(table(data_cargada$estado_actual) = "Pendiente"))
?which
which(LETTERS == "R")
LETTERS
which(LETTERS == "R")
which(ll <- c(TRUE, FALSE, TRUE, NA, FALSE, FALSE, TRUE))
ll
data_cargada$estado_actual
which(data_cargada$estado_actual == "Pendiente")
length(which(data_cargada$estado_actual == "Pendiente")))
length(which(data_cargada$estado_actual == "Pendiente"))
data_cargada$estado_actual
length(which(data_cargada$estado_actual == "Analisis de requerimiento"))
which(data_table_info$Retraso == TRUE)
length(which(data_table_info$Retraso == TRUE))
#Librerias
library(shiny)
library(DT)
library(tidyverse)
library(xlsx)
library(readxl)
library(shinydashboard)
#Archivos de UI
source("ui.R")
source("UI_files/main_sidebar_menu.R")
# Conexión a los archivos externos
source("datos/data_loading.R")
source("Modulos/monitor_estado_actual.R")
source("server.R")
# Ejecutable de aplicación
shinyApp(ui = get_main_ui, server = main_server)
deployApp(appDir = getwd())
deployApp(appDir = getwd())
deployApp(appDir = getwd())
#Archivos de UI
source("ui.R")
source("UI_files/main_sidebar_menu.R")
source("server.R")
# Ejecutable de aplicación
shinyApp(ui = get_main_ui, server = main_server)
deployApp(appDir = getwd())
deployApp(appDir = getwd())
